#!/usr/bin/env python3
"""
Âü∑Ë°å SQL ÂâµÂª∫Ë°®
"""
import os
import psycopg2

def execute_sql():
    db_url = os.environ.get('DATABASE_URL')
    if not db_url:
        print("ÈåØË™§ÔºöÊú™Ë®≠ÁΩÆ DATABASE_URL")
        return
    
    sql_commands = """
-- ÂâµÂª∫ collection_data Ë°®
CREATE TABLE IF NOT EXISTS collection_data (
    id SERIAL PRIMARY KEY,
    activation_code VARCHAR(50) NOT NULL,
    device_id VARCHAR(100),
    device_info TEXT,
    ip_location TEXT,
    group_name VARCHAR(255),
    group_link TEXT,
    collection_method VARCHAR(100) DEFAULT 'Ê¥ªË∫çÁî®Êà∂Êé°ÈõÜ',
    members_count INTEGER DEFAULT 0,
    members_data TEXT,
    upload_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ÂâµÂª∫Á¥¢Âºï
CREATE INDEX IF NOT EXISTS idx_collection_activation_code ON collection_data(activation_code);
CREATE INDEX IF NOT EXISTS idx_collection_upload_time ON collection_data(upload_time DESC);
CREATE INDEX IF NOT EXISTS idx_collection_device_id ON collection_data(device_id);

-- ÂâµÂª∫ software_data Ë°®
CREATE TABLE IF NOT EXISTS software_data (
    id SERIAL PRIMARY KEY,
    activation_code VARCHAR(50) NOT NULL,
    device_id VARCHAR(100),
    device_info TEXT,
    ip_location TEXT,
    accounts TEXT,
    collections TEXT,
    invitations TEXT,
    statistics TEXT,
    status VARCHAR(50),
    upload_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ÂâµÂª∫Á¥¢Âºï
CREATE INDEX IF NOT EXISTS idx_software_activation_code ON software_data(activation_code);
CREATE INDEX IF NOT EXISTS idx_software_device_id ON software_data(device_id);
"""
    
    try:
        conn = psycopg2.connect(db_url)
        cur = conn.cursor()
        
        # Âü∑Ë°åÊØèÂÄãÂëΩ‰ª§
        for command in sql_commands.split(';'):
            command = command.strip()
            if command:
                print(f"Âü∑Ë°å: {command[:50]}...")
                cur.execute(command)
        
        conn.commit()
        
        # È©óË≠âË°®Â∑≤ÂâµÂª∫
        cur.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('collection_data', 'software_data')
            ORDER BY table_name
        """)
        
        tables = cur.fetchall()
        print("\n‚úÖ ÊàêÂäüÂâµÂª∫ÁöÑË°®Ôºö")
        for table in tables:
            print(f"  - {table[0]}")
        
        # Ê™¢Êü• collection_data Ë°®ÁµêÊßã
        cur.execute("""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'collection_data'
            ORDER BY ordinal_position
        """)
        
        print("\nüìã collection_data Ë°®ÁµêÊßãÔºö")
        for col in cur.fetchall():
            print(f"  - {col[0]}: {col[1]}")
        
        cur.close()
        conn.close()
        
        print("\n‚úÖ ÊâÄÊúâÊìç‰ΩúÂÆåÊàêÔºÅ")
        
    except Exception as e:
        print(f"\n‚ùå ÈåØË™§Ôºö{e}")

if __name__ == "__main__":
    execute_sql()